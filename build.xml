<project default="deployLocal" name="${package(abbrev)}" basedir=".">
    
    <!-- import default properties from file -->
    <property file="local.build.properties"/>
    <property file="build.properties"/>
    
    <property name="pathResolverLocalhost" location="scripts/pathResolverLocalhost.py"/>
    <property name="pathResolverDev" location="scripts/pathResolverDev.py"/>
    
    <target name="gitStash">
        <description>Stash uncommitted changes</description>
        <exec executable="${bash.command}" outputproperty="git.stash">
            <arg value="-c"/>
            <arg value="${git.command} stash save tempBuild"/>
            <arg value="${git.command} stash apply"/>
            <env key="LANG" value="C"/>
        </exec>
        <echo>Uncomittet changes stashed to tempBuild</echo>
    </target>
    
    <target name="cleanAll" depends="gitStash">
        <delete dir="build/"></delete>
        <delete file="./repo.xml"/>
    </target>
    
    <target name="clean" depends="gitStash">
        <delete file="./repo.xml"/>
    </target>
    
    <target name="init" depends="clean">
        <mkdir dir="${build.dir}"/>
    </target>
    
    <target name="gitReset">
        <exec executable="${bash.command}" outputproperty="git.reset">
            <arg value="-c"/>
            <arg value="${git.command} reset --hard"/>
            <env key="LANG" value="C"/>
        </exec>
    </target>
    <target name="gitApply" depends="gitReset">
        <exec executable="${bash.command}" outputproperty="git.reset">
            <arg value="-c"/>
            <arg value="${git.command} stash pop"/>
            <env key="LANG" value="C"/>
        </exec>
        <echo>Stash applied after resetting git repo</echo>
    </target>

    <target name="get-current-hash-of-HEAD">
        <description>Get the hash of the current git HEAD</description>
        <exec executable="${bash.command}" outputproperty="local.revision">
            <arg value="-c"/>
            <arg value="${git.command} rev-parse --short HEAD"/>
            <env key="LANG" value="C"/>
        </exec>
        <echo>Current HEAD: ${local.revision}</echo>
    </target>
    
    <target name="get-current-git-tag">
        <exec executable="${bash.command}" outputproperty="git.tag">
            <arg value="-c"/>
            <arg value="${git.command} describe --abbrev=0"/>
            <env key="LANG" value="C"/>
        </exec>
    </target>
    
    <target name="xarLocal" depends="init, get-current-hash-of-HEAD, get-current-git-tag">
        <copy todir=".">
            <file file="repo/rwxrwxr-x/repo.xml"/>
        </copy>
        <exec executable="python">
            <arg value="${pathResolverLocalhost}"/>
        </exec>
        <property name="package.name.local" value="${project.app}_local_${git.tag}_${local.revision}.xar"/>
        <zip basedir="." destfile="${build.dir.local}/${package.name.local}" excludes="build/ .existdb.json build.sh"/>
        <antcall target="gitApply"/>
    </target>
    
    <target name="xarDev" depends="init, get-current-hash-of-HEAD">
        <copy todir=".">
            <file file="repo/rwxrwx---/repo.xml"/>
        </copy>
        <exec executable="python">
            <arg value="${pathResolverDev}"/>
        </exec>
        <property name="package-name-dev" value="${project.app}-dev-${local.revision}.xar"/>
        <zip basedir="." destfile="${build.dir.dev}/${package-name-dev}" excludes="build/ .existdb.json build.sh"/>
        <antcall target="gitApply"/>
    </target>
    
    <target name="xarPortal" depends="init, get-current-hash-of-HEAD">
        <copy todir=".">
            <file file="repo/rwxrwxr-x/repo.xml"/>
        </copy>
        <zip basedir="." destfile="${build.dir.portal}/${project.app}-portal-${local.revision}.xar" excludes="build/ .existdb.json build.sh"/>
        <antcall target="gitApply"/>
    </target>
    
    <target name="xar" depends="init">
        <input message="set user permissions (default: user=yes,group=yes;other=no)" defaultvalue="rwxrwx---" addproperty="userPermissions"/>
        <copyfile src="repo/${userPermissions}/repo.xml" dest="./repo.xml" forceoverwrite="yes"/>
        <mkdir dir="${build.dir}"/>
        <zip basedir="." destfile="${build.dir}/${project.app}-${local.revision}.xar" excludes="build/ .existdb.json build.sh"/>
        <echo message=""/>
        <echo message="!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"/>
        <echo message="!!!!!!! user permissions set to !!!!!!!"/>
        <echo message="!!!!!!!!!!!    ${userPermissions}    !!!!!!!!!!!"/>
        <echo message="!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"/>
        <antcall target="gitReset"/>
    </target>
    
    <target name="deployLocal" depends="xarLocal">
        <path id="classpath.eXist5">
            <fileset dir="${exist5.libs}" erroronmissingdir="no">
                <include name="*.jar"/>
            </fileset>
        </path>
        <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
            <classpath refid="classpath.eXist5"/>
        </typedef>
        
        <!-- store xar-file in eXist-db -->
        <xdb:store xmlns:xdb="http://exist-db.org/ant"
            uri="${exist.db}/tmp"
            createcollection="true"
            createsubcollections="true"
            user="${exist.user}"
            password="${exist.pass}"
            failonerror="true">
            <fileset file="${build.dir.local}/${package.name.local}"/>
        </xdb:store>
        
        <!-- Deploy the xar -->
        <xdb:xquery  xmlns:xdb="http://exist-db.org/ant"
            uri="${exist.db}"
            user="${exist.user}"
            password="${exist.pass}">
            (
            if("${project.name}" = repo:list()) then (
            repo:undeploy("${project.name}"),
            repo:remove("${project.name}")
            )
            else (),
            repo:install-and-deploy-from-db("/db/tmp/${package.name.local}")
            )
        </xdb:xquery>
    </target>
    
</project>
